install.packages('e1071', dependencies=TRUE)
preProc <- preProcess(training[,58:69], method="pca",pcaComp=12)
trainPC <- predict(preProc, training[,58:69])
names(trainPC)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC <- precict(preProc,testing[,58:69])
testPC <- predict(preProc,testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
summary(modelFit)
preProc <- preProcess(training[,58:69], method="pca",pcaComp=9)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training[,58:69], method="pca",pcaComp=7)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training[,58:69], method="pca",pcaComp=10)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training[,58:69], method="pca",pcaComp=7)
trainPC <- predict(preProc, training[,58:69])
modelFit <- train(training$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,58:69])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
head(training)
training.IL <- cbind(training$diagnosis, training[,58:69])
head(training.IL)
dim(training.IL)
modelFit <- train(training.IL$diagnosis ~ ., method="glm",preProcess="pca",data=training.IL)
names(training.IL)
names(training)
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
modelFit <- train(training.IL$diagnosis ~ ., method="glm",preProcess="pca",data=training.IL)
names(training)
confusionMatrix(testing.IL$diagnosis, predict(modelFit,testing.IL))
preProc <- preProcess(training[-1], method="pca",pcaComp=7)
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=7)
trainPC <- predict(preProc, training.Il[-1])
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=12)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=10)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
?prcomp
prcomp(training.IL[-1])
prComp <- prcomp(training.IL[-1])
M <- abs(cor(training.IL[-1]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
preProc <- preProcess(log10(training.IL[-1] +1), method="pca",pcaComp=12)
names(training.IL[-1])
preProc <- preProcess(log10(training.IL[-1]+1), method="pca",pcaComp=12)
trainPC <- predict(preProc, log10(training.IL[-1]+1)
)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training[,58:69])
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
training.IL[-1]
head(training.IL[-1])
head(training.IL)
preProc <- preProcess(training.IL[-1]), method="pca",pcaComp=12)
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=12)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=10)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=9)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=7)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=12)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=7)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
summary(modelFit)
modelFit <- train(training.IL$diagnosis ~ ., method="glm",preProcess="pca",data=training.IL)
confusionMatrix(testing.IL$diagnosis, predict(modelFit,testing.IL))
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=7)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=9)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=10)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
names(training.IL)
dim(training.IL)
dim(testing.IL)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training[,58:69])
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=10)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
summary(modelFit)
modelFit <- train(training.IL$diagnosis ~ ., method="glm",preProcess="pca",data=training.IL)
confusionMatrix(testing.IL$diagnosis, predict(modelFit,testing.IL))
testing.IL <- cbind(testing[1], testing[,58:69])
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=10)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=9)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
names(trainPC)
summary(preProc)
preProc
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training[,58:69])
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=9)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
summary(modelFit)
modelFit <- train(training.IL$diagnosis ~ ., method="glm",preProcess="pca",data=training.IL)
confusionMatrix(testing.IL$diagnosis, predict(modelFit,testing.IL))
modFit <- train(diagnosis ~ .,method=glm, data=training)
modFit <- train(diagnosis ~ .,method="glm", data=training)
modFit <- train(diagnosis ~ .,method="glm", data=training.IL)
finMod <- modFit$finalModel
print(modFit)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training[,58:69])
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
modFit <- train(diagnosis ~ .,method="glm", data=training.IL)
finMod <- modFit$finalModel
print(modFit)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training[,58:69])
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
modFit <- train(diagnosis ~ .,method="glm", data=training.IL)
finMod <- modFit$finalModel
print(modFit)
summary(modelFit)
modelFit$finalModel
print(finMod)
print(modFit)
confusionMatrix(testing.IL$diagnosis,predict(modelFit,testPC))
confusionMatrix(testing$diagnosis,predict(modFit, testing.IL[-1])))
confusionMatrix(testing$diagnosis,predict(modFit, testing.IL[-1]))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training[,58:69])
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=9)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training[,58:69])
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=9)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
modFit <- train(diagnosis ~ .,method="glm", data=training.IL)
finMod <- modFit$finalModel
print(modFit)
confusionMatrix(testing$diagnosis,predict(modFit, testing.IL[-1]))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
with(training, hist(log(SuperPlasticizer)+1))
with(training, hist(log(SuperPlasticizer)+1))
names(training)
with(training, hist(log(Superplasticizer)+1))
with(training, hist(log(Superplasticizer+1)))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training[,58:69])
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=9)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training[,58:69])
training.IL <- cbind(training[1], training[,58:69])
testing.IL <- cbind(testing[1], testing[,58:69])
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=7)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=8)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=7)
trainPC <- predict(preProc, training.IL[-1])
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=7)
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=7)
preProc <- preProcess(training.IL[-1], method="pca",pcaComp=7)
trainPC <- predict(preProc, training.IL[-1])
modelFit <- train(training.IL$diagnosis ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing.IL[-1])
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
with(training, hist(log(Superplasticizer+1)))
with(training, hist(log(Superplasticizer)))
with(training, hist(Superplasticizer))
with(training[training$Superplasticizer!=0,], hist(Superplasticizer))
with(training[training$Superplasticizer!=0,], hist(Superplasticizer,breaks=100))
with(training[training$Superplasticizer!=0,], hist(Superplasticizer,breaks=1000))
dim(training)
dim(training[training$Superplasticizer!=0,])
with(training[training$Superplasticizer!=0,], hist(Superplasticizer,breaks=20))
with(training, hist(log(Superplasticizer)))
with(training, hist(Superplasticizer))
with(training[training$Superplasticizer!=0,], hist(Superplasticizer,breaks=20))
with(training, hist(Superplasticizer))
with(training[training$Superplasticizer!=0,], hist(Superplasticizer,breaks=20))
?createDataPartition
createDataPartition(adData$diagnosis, p = 3/4)
inTrain = createDataPartition(adData$diagnosis, p = 3/4, list=F)
createDataPartition(adData$diagnosis, p = 3/4, list=F)
with(training, hist(log(Superplasticizer), breaks=23))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
with(training, hist(log(Superplasticizer), breaks=23))
with(training, hist(log(Superplasticizer), breaks=33))
with(training, hist(log(Superplasticizer), breaks=53))
log(0)
data(iris)
qplot(Petal.Width, Sepal.Width, colour=Species,data=iris)
library(ggplot2)
qplot(Petal.Width, Sepal.Width, colour=Species,data=iris)
modFit <- train(species ~ ., method="rpart", data=iris)
library(caret)
qplot(Petal.Width, Sepal.Width, colour=Species,data=iris)
modFit <- train(species ~ ., method="rpart", data=iris)
modFit <- train(Species ~ ., method="rpart", data=iris)
print(modFit$finalModel)
inTrain = createDataPartition(iris$Species, p = 3/4)[[1]]
training = iris[ inTrain,]
testing = iris[-inTrain,]
modFit <- train(Species ~ ., method="rpart", data=iris)
print(modFit$finalModel)
modFit <- train(Species ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=T, main="Classification Tree")
text(modFit$finalModel, use.n=T, all=T, cex=.8)
install.packages("rattle")
fancyRpartPlot(modFit$finalModel)
library(rattle)
data(iris)
library(ggplot2)
library(caret)
qplot(Petal.Width, Sepal.Width, colour=Species,data=iris)
inTrain = createDataPartition(iris$Species, p = 3/4)[[1]]
training = iris[ inTrain,]
testing = iris[-inTrain,]
modFit <- train(Species ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=T, main="Classification Tree")
text(modFit$finalModel, use.n=T, all=T, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
remove.packages("RGtk2")
remove.packages("rattle")
remove.packages("GTK+")
install.packages("RGtk2")
install.packages("RGtk2")
install.packages("rattle")
data(iris)
library(ggplot2)
library(caret)
qplot(Petal.Width, Sepal.Width, colour=Species,data=iris)
inTrain = createDataPartition(iris$Species, p = 3/4)[[1]]
training = iris[ inTrain,]
testing = iris[-inTrain,]
modFit <- train(Species ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=T, main="Classification Tree")
text(modFit$finalModel, use.n=T, all=T, cex=.8)
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
q()
library(caret)
library(ggplot2)
set.seed(666)
# Load training data and clean out "#DIV/0!" errors
train.start <- read.table('data/pml-training.csv',sep=',', header=T, stringsAsFactors=F)
x <- readLines('data/pml-training.csv')
y <- gsub( "\"#DIV/0!\"", "NA", x )
cat(y, file="data/clean.train.csv", sep="\n")
# Load cleaned training data and testing data
train.clean <- read.table('data/clean.train.csv',sep=',', header=T, stringsAsFactors=F)
test.quiz <- read.table('data/pml-testing.csv',sep=',', header=T, stringsAsFactors=F)
# identify the purely numeric covariates
nums <- sapply(train.clean, is.numeric)
train <- train.clean[,nums]
test.quiz <- test.quiz[,nums]
# remove index and timestamp columns
train <- train[, c(-1:-4)]
test.quiz <- test.quiz[, c(-1:-4)]
# remove the near-zero variables
nsv <- nearZeroVar(train,saveMetrics=TRUE)
train <- train[,!nsv$zeroVar]
test.quiz <- test.quiz[,!nsv$zeroVar]
# remove columns that are more than 50% NA
test.quiz <- test.quiz[ , apply(train, 2, function(x) (length(which(is.na(x)==F))/length(x)) > .5)]
train <- train[ , apply(train, 2, function(x) (length(which(is.na(x)==F))/length(x)) > .5)]
setwd('c:/coursera/machine\ learning/project')
##########
# Data Wrangling and Covariate Creation
##########
library(caret)
library(ggplot2)
set.seed(666)
# Load training data and clean out "#DIV/0!" errors
train.start <- read.table('data/pml-training.csv',sep=',', header=T, stringsAsFactors=F)
x <- readLines('data/pml-training.csv')
y <- gsub( "\"#DIV/0!\"", "NA", x )
cat(y, file="data/clean.train.csv", sep="\n")
# Load cleaned training data and testing data
train.clean <- read.table('data/clean.train.csv',sep=',', header=T, stringsAsFactors=F)
test.quiz <- read.table('data/pml-testing.csv',sep=',', header=T, stringsAsFactors=F)
# identify the purely numeric covariates
nums <- sapply(train.clean, is.numeric)
train <- train.clean[,nums]
test.quiz <- test.quiz[,nums]
# remove index and timestamp columns
train <- train[, c(-1:-4)]
test.quiz <- test.quiz[, c(-1:-4)]
# remove the near-zero variables
nsv <- nearZeroVar(train,saveMetrics=TRUE)
train <- train[,!nsv$zeroVar]
test.quiz <- test.quiz[,!nsv$zeroVar]
# remove columns that are more than 50% NA
test.quiz <- test.quiz[ , apply(train, 2, function(x) (length(which(is.na(x)==F))/length(x)) > .5)]
train <- train[ , apply(train, 2, function(x) (length(which(is.na(x)==F))/length(x)) > .5)]
# split data
train<-cbind(train, train.clean$classe)
names(train)[ncol(train)] <- 'classe'
train.partition <- createDataPartition(y=as.character(train.clean$classe), p=.75, list=F)
train.set <- train[train.partition,]
test.set <- train[-train.partition,]
train.classe <- train.set$classe
test.classe <- test.set$classe
train.set <- train.set[,-ncol(train.set)]
test.set <- test.set[,-ncol(test.set)]
train.qplot <- cbind(train.set, train.classe)
pairs(train.qplot[,c(sample(1:ncol(train.qplot[,-ncol(train.qplot)]), 5), ncol(train.qplot))],
main = "Randomized View of training data pairs", pch = 21,
bg = c("orange", "green3", "red", "purple", "blue")[unclass(train.qplot$train.classe)],
lower.panel=NULL, font.labels=2, cex.labels=1.0)
source('~/.active-rstudio-document', echo=TRUE)
round(acc)
round(.522223349, 2)
source('~/.active-rstudio-document', echo=TRUE)
